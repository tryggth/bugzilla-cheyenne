use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1390865808',
        'name' => 'pages/bugzilla.dtd.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 8 "template/en/default/pages/bugzilla.dtd.tmpl"
    # USE
    $stash->set('Bugzilla',
                $context->plugin('Bugzilla'));
    $output .=  "\n<!ELEMENT ";
#line 9 "template/en/default/pages/bugzilla.dtd.tmpl"
    $output .=  'bugzilla';
    $output .=  " (bug+)>\n<!ATTLIST ";
#line 10 "template/en/default/pages/bugzilla.dtd.tmpl"
    $output .=  'bugzilla';
    $output .=  " \n          version CDATA #REQUIRED\n          urlbase CDATA #REQUIRED\n          maintainer CDATA #REQUIRED\n          exporter CDATA #IMPLIED\n>\n<!ELEMENT ";
#line 16 "template/en/default/pages/bugzilla.dtd.tmpl"
    $output .=  'bug';
    $output .=  " (bug_id, \n               (alias?, \n                creation_ts, \n                short_desc, \n                delta_ts, \n                reporter_accessible, \n                cclist_accessible, \n                classification_id, \n                classification, \n                product, \n                component, \n                version, \n                rep_platform, \n                op_sys, \n                bug_status, \n                resolution?, \n                dup_id?, \n                see_also*, \n                bug_file_loc?, \n                status_whiteboard?, \n                keywords*, \n                priority, \n                bug_severity, \n                target_milestone?, \n                dependson*, \n                blocked*, \n                everconfirmed, \n                reporter, \n                assigned_to, \n                cc*, \n                (estimated_time, \n                 remaining_time, \n                 actual_time, \n                 deadline?)?, \n                qa_contact?,";
#line 54 "template/en/default/pages/bugzilla.dtd.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['Bugzilla', 0, 'active_custom_fields', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'field'} = $_tt_value;
    $output .=  "\n                ";
#line 52 "template/en/default/pages/bugzilla.dtd.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['field', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
#line 53 "template/en/default/pages/bugzilla.dtd.tmpl"
    if ($stash->get(['field', 0, 'type', 0]) eq '3') {
    $output .=  "*";
    }
    else {
    $output .=  "?";
    }
    
    $output .=  ", ";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n                votes?, \n                token?, \n                group*, \n                flag*, \n                comment_sort_order*,\n                long_desc*, \n                attachment*)?)>\n<!ATTLIST ";
#line 62 "template/en/default/pages/bugzilla.dtd.tmpl"
    $output .=  'bug';
    $output .=  "\n          error (NotFound | NotPermitted | InvalidBugId) #IMPLIED\n>\n<!ELEMENT bug_id (#PCDATA)>\n<!ELEMENT alias (#PCDATA)>\n<!ELEMENT reporter_accessible (#PCDATA)>\n<!ELEMENT cclist_accessible (#PCDATA)>\n<!ELEMENT exporter (#PCDATA)>\n<!ELEMENT urlbase (#PCDATA)>\n<!ELEMENT bug_status (#PCDATA)>\n<!ELEMENT classification_id (#PCDATA)>\n<!ELEMENT classification (#PCDATA)>\n<!ELEMENT product (#PCDATA)>\n<!ELEMENT priority (#PCDATA)>\n<!ELEMENT version (#PCDATA)>\n<!ELEMENT rep_platform (#PCDATA)>\n<!ELEMENT assigned_to (#PCDATA)>\n<!ATTLIST assigned_to \n          name CDATA #REQUIRED\n>\n<!ELEMENT delta_ts (#PCDATA)>\n<!ELEMENT component (#PCDATA)>\n<!ELEMENT reporter (#PCDATA)>\n<!ATTLIST reporter\n          name CDATA #REQUIRED\n>\n<!ELEMENT target_milestone (#PCDATA)>\n<!ELEMENT bug_severity (#PCDATA)>\n<!ELEMENT creation_ts (#PCDATA)>\n<!ELEMENT qa_contact (#PCDATA)>\n<!ATTLIST qa_contact\n          name CDATA #REQUIRED\n>\n<!ELEMENT status_whiteboard (#PCDATA)>\n<!ELEMENT op_sys (#PCDATA)>\n<!ELEMENT resolution (#PCDATA)>\n<!ELEMENT dup_id (#PCDATA)>\n<!ELEMENT bug_file_loc (#PCDATA)>\n<!ELEMENT short_desc (#PCDATA)>\n<!ELEMENT keywords (#PCDATA)>\n<!ELEMENT dependson (#PCDATA)>\n<!ELEMENT blocked (#PCDATA)>\n<!ELEMENT everconfirmed (#PCDATA)>\n<!ELEMENT cc (#PCDATA)>\n<!ELEMENT see_also (#PCDATA)>\n<!ELEMENT votes (#PCDATA)>\n<!ELEMENT token (#PCDATA)>\n<!ELEMENT group (#PCDATA)>\n<!ATTLIST group\n          id CDATA #REQUIRED\n>\n<!ELEMENT estimated_time (#PCDATA)>\n<!ELEMENT remaining_time (#PCDATA)>\n<!ELEMENT actual_time (#PCDATA)>\n<!ELEMENT deadline (#PCDATA)>";
#line 119 "template/en/default/pages/bugzilla.dtd.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['Bugzilla', 0, 'active_custom_fields', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'field'} = $_tt_value;
    $output .=  "\n<!ELEMENT ";
#line 118 "template/en/default/pages/bugzilla.dtd.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('xml')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['field', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " (#PCDATA)>";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n<!ELEMENT comment_sort_order (#PCDATA)>\n<!ELEMENT long_desc (commentid, comment_count, attachid?, who, bug_when, work_time?, thetext)>\n<!ATTLIST long_desc\n          isprivate (0|1) #REQUIRED\n>\n<!ELEMENT commentid (#PCDATA)>\n<!ELEMENT comment_count (#PCDATA)>\n<!ELEMENT who (#PCDATA)>\n<!ATTLIST who\n          name CDATA #REQUIRED\n>\n<!ELEMENT bug_when (#PCDATA)>\n<!ELEMENT work_time (#PCDATA)>\n<!ELEMENT thetext (#PCDATA)>\n<!ELEMENT attachment (attachid, date, delta_ts, desc, filename, type, size, attacher, token?, data?, flag*)>\n<!ATTLIST attachment\n          isobsolete (0|1) #REQUIRED\n          ispatch (0|1) #REQUIRED\n          isprivate (0|1) #REQUIRED\n>\n<!ELEMENT attacher (#PCDATA)>\n<!ATTLIST attacher\n          name CDATA #REQUIRED\n>\n<!ELEMENT attachid (#PCDATA)>\n<!ELEMENT date (#PCDATA)>\n<!ELEMENT desc (#PCDATA)>\n<!ELEMENT filename (#PCDATA)>\n<!ELEMENT type (#PCDATA)>\n<!ELEMENT size (#PCDATA)>\n<!ELEMENT data (#PCDATA)>\n<!ATTLIST data\n          encoding (base64) #IMPLIED\n>\n<!ELEMENT flag EMPTY>\n<!ATTLIST flag\n          name CDATA #REQUIRED\n          id CDATA #REQUIRED\n          type_id CDATA #REQUIRED \n          status CDATA #REQUIRED\n          setter CDATA #REQUIRED\n          requestee CDATA #IMPLIED\n>\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
