use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'extensions/name-readme.txt.tmpl',
        'modtime' => '1390865808',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\nNormal templates go in this directory. You can load them in your\ncode like this:\n\nuse B";
    $output .=  "ugzilla::Error;\nmy \$template = B";
    $output .=  "ugzilla->template;\n\$template->process('";
#line 14 "template/en/default/extensions/name-readme.txt.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('lower')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('name');
        
        &$_tt_filter($output);
    };
    
    $output .=  "/some-template.html.tmpl')\n  or ThrowTemplateError(\$template->error());\n\nThat would be how to load a file called some-template.html.tmpl that\nwas in this directory.\n\nNote that you have to be careful that the full path of your template\nnever conflicts with a template that exists in ";
#line 21 "template/en/default/extensions/name-readme.txt.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  " or in \nanother extension, or your template might override that template. That's why\nwe created this directory called '";
#line 23 "template/en/default/extensions/name-readme.txt.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('lower')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('name');
        
        &$_tt_filter($output);
    };
    
    $output .=  "' for you, so you\ncan put your templates in here to help avoid conflicts.\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
