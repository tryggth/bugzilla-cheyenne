use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'email/bugmail-header.txt.tmpl',
        'modtime' => '1390865808',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n  ";
#line 9 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $context->process('global/reason-descs.none.tmpl');
#line 10 "template/en/default/email/bugmail-header.txt.tmpl"
    $stash->set('isnew', $stash->get(['bug', 0, 'lastdiffed', 0]) ? 0 : 1);
#line 11 "template/en/default/email/bugmail-header.txt.tmpl"
    $stash->set('show_new', $stash->get('isnew') && ($stash->get(['to_user', 0, 'settings', 0, 'bugmail_new_prefix', 0, 'value', 0]) eq 'on'));
    $output .=  "\n\nFrom: ";
#line 14 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['Param', [ 'mailfrom' ]]);
    $output .=  "\nTo: ";
#line 15 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['to_user', 0, 'email', 0]);
    $output .=  "\nSubject: [";
#line 16 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bug', 0]);
    $output .=  " ";
#line 16 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'id', 0]);
    $output .=  "] ";
#line 16 "template/en/default/email/bugmail-header.txt.tmpl"
    if ($stash->get('show_new')) {
    $output .=  'New: ';
    }
    
#line 16 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'short_desc', 0]);
    $output .=  "\nDate: ";
#line 17 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get('date');
    $output .=  "\nX-Bugzilla-Reason: ";
#line 18 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get('reasonsheader');
    $output .=  "\nX-Bugzilla-Type: ";
#line 19 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get('isnew') ? 'new' : 'changed';
    $output .=  "\nX-Bugzilla-Watch-Reason: ";
#line 20 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get('reasonswatchheader');
#line 23 "template/en/default/email/bugmail-header.txt.tmpl"
    if ($stash->get(['Param', [ 'useclassification' ]])) {
    $output .=  "\nX-Bugzilla-Classification: ";
#line 22 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'classification', 0]);
    }
    
    $output .=  "\nX-Bugzilla-Product: ";
#line 24 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'product', 0]);
    $output .=  "\nX-Bugzilla-Component: ";
#line 25 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'component', 0]);
    $output .=  "\nX-Bugzilla-Version: ";
#line 26 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'version', 0]);
    $output .=  "\nX-Bugzilla-Keywords: ";
#line 27 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'keywords', 0]);
    $output .=  "\nX-Bugzilla-Severity: ";
#line 28 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'bug_severity', 0]);
    $output .=  "\nX-Bugzilla-Who: ";
#line 29 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['changer', 0, 'login', 0]);
    $output .=  "\nX-Bugzilla-Status: ";
#line 30 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'bug_status', 0]);
    $output .=  "\nX-Bugzilla-Priority: ";
#line 31 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'priority', 0]);
    $output .=  "\nX-Bugzilla-Assigned-To: ";
#line 32 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'assigned_to', 0, 'login', 0]);
    $output .=  "\nX-Bugzilla-Target-Milestone: ";
#line 33 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['bug', 0, 'target_milestone', 0]);
    $output .=  "\nX-Bugzilla-Flags:";
#line 34 "template/en/default/email/bugmail-header.txt.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['bug', 0, 'flags', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'flag'} = $_tt_value;
    $output .=  " ";
#line 34 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['flag', 0, 'name', 0]);
#line 34 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['flag', 0, 'status', 0]);;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\nX-Bugzilla-Changed-Fields: ";
#line 35 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get(['changedfields', 0, 'join', [ ' ' ]]);
    $output .=  "\n";
#line 36 "template/en/default/email/bugmail-header.txt.tmpl"
    $output .=  $stash->get('threadingmarker');
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
