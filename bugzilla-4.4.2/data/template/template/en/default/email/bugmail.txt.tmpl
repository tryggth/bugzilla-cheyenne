use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'email/bugmail.txt.tmpl',
        'modtime' => '1390865808',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
#line 9 "template/en/default/email/bugmail.txt.tmpl"
    $output .=  $context->process('global/reason-descs.none.tmpl');
    $output .=  "\n";
#line 11 "template/en/default/email/bugmail.txt.tmpl"
    $stash->set('isnew', $stash->get(['bug', 0, 'lastdiffed', 0]) ? 0 : 1);
    $output .=  "\n";
#line 13 "template/en/default/email/bugmail.txt.tmpl"
    $output .=  $stash->get(['Hook', 0, 'process', [ 'start' ]]);
    $output .=  "\n\n";
#line 15 "template/en/default/email/bugmail.txt.tmpl"
    $output .=  $context->process('generate_diffs');
#line 23 "template/en/default/email/bugmail.txt.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('new_comments');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'comment'} = $_tt_value;
    $output .=  "\n";
#line 21 "template/en/default/email/bugmail.txt.tmpl"
    if ($stash->get(['comment', 0, 'count', 0])) {
    $output .=  "\n--- Comment #";
#line 20 "template/en/default/email/bugmail.txt.tmpl"
    $output .=  $stash->get(['comment', 0, 'count', 0]);
    $output .=  " from ";
#line 20 "template/en/default/email/bugmail.txt.tmpl"
    $output .=  $stash->get(['comment', 0, 'author', 0, 'identity', 0]);
    $output .=  " ---";
    }
    
    $output .=  "\n";
#line 22 "template/en/default/email/bugmail.txt.tmpl"
    $output .=  $stash->get(['comment', 0, 'body_full', [ { 'is_bugmail' => 1, 'wrap' => 1  } ]]);;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n\n-- ";
    $output .=  "\nYou are receiving this mail because:";
#line 27 "template/en/default/email/bugmail.txt.tmpl"
    $stash->set('reason_lines', [ ]);
#line 30 "template/en/default/email/bugmail.txt.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('reasons');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'reason'} = $_tt_value;
#line 29 "template/en/default/email/bugmail.txt.tmpl"
    if ($stash->get(['reason_descs', 0, $stash->get('reason'), 0])) {
    $output .=  $stash->get(['reason_lines', 0, 'push', [ $stash->get(['reason_descs', 0, $stash->get('reason'), 0]) ]]);
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 34 "template/en/default/email/bugmail.txt.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('reasons_watch');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'reason'} = $_tt_value;
#line 32 "template/en/default/email/bugmail.txt.tmpl"
    if ($stash->get(['watch_reason_descs', 0, $stash->get('reason'), 0])) {
    $output .=  $stash->get(['reason_lines', 0, 'push', [ $stash->get(['watch_reason_descs', 0, $stash->get('reason'), 0]) ]]);
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";
#line 35 "template/en/default/email/bugmail.txt.tmpl"
    $output .=  $stash->get(['reason_lines', 0, 'join', [ ('' . "\n") ]]);
    $output .=  "\n";
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'generate_diffs' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
#line 38 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get('urlbase');
        $output .=  "show_bug.cgi?id=";
#line 38 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get(['bug', 0, 'id', 0]);
        $output .=  "\n";
#line 39 "template/en/default/email/bugmail.txt.tmpl"
        $stash->set('last_changer', 0);
#line 42 "template/en/default/email/bugmail.txt.tmpl"
        if ($stash->get('isnew')) {
        $output .=  "\n";
        }
        
#line 65 "template/en/default/email/bugmail.txt.tmpl"
        
        # FOREACH 
        do {
            my ($_tt_value, $_tt_error, $_tt_oldloop);
            my $_tt_list = $stash->get('diffs');
            
            unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
                $_tt_list = Template::Config->iterator($_tt_list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($_tt_value, $_tt_error) = $_tt_list->get_first();
            eval { $_tt_oldloop = $stash->get('loop') };
            $stash->set('loop', $_tt_list);
            eval {
        FOR1:   while (! $_tt_error) {
                    $stash->{'change'} = $_tt_value;
#line 58 "template/en/default/email/bugmail.txt.tmpl"
        if (! $stash->get('isnew') && $stash->get(['change', 0, 'who', 0, 'id', 0]) ne $stash->get('last_changer')) {
#line 45 "template/en/default/email/bugmail.txt.tmpl"
        $stash->set('last_changer', $stash->get(['change', 0, 'who', 0, 'id', 0]));
#line 54 "template/en/default/email/bugmail.txt.tmpl"
        if ($stash->get(['change', 0, 'blocker', 0])) {
#line 47 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get(['terms', 0, 'Bug', 0]);
        $output .=  " ";
#line 47 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get(['bug', 0, 'id', 0]);
        $output .=  " depends on ";
#line 47 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get(['terms', 0, 'bug', 0]);
        $output .=  " ";
#line 47 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get(['change', 0, 'blocker', 0, 'id', 0]);
        $output .=  ", which changed state.\n\n";
#line 49 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get(['terms', 0, 'Bug', 0]);
        $output .=  " ";
#line 49 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get(['change', 0, 'blocker', 0, 'id', 0]);
        $output .=  " Summary: ";
#line 49 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get(['change', 0, 'blocker', 0, 'short_desc', 0]);
        $output .=  "\n";
#line 50 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get('urlbase');
        $output .=  "show_bug.cgi?id=";
#line 50 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get(['change', 0, 'blocker', 0, 'id', 0]);
        }
        else {
        $output .=  "\n";
#line 53 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get(['change', 0, 'who', 0, 'identity', 0]);
        $output .=  " changed:";
        }
        
        $output .=  "\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n";
        }
        
#line 59 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $context->process('email/bugmail-common.txt.tmpl');
#line 64 "template/en/default/email/bugmail.txt.tmpl"
        if ($stash->get('isnew')) {
#line 61 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get(['format_columns', [ 2, $stash->get('field_label')  . ':', $stash->get('new_value') ]]);
        }
        else {
#line 63 "template/en/default/email/bugmail.txt.tmpl"
        $output .=  $stash->get(['format_columns', [ 3, $stash->get('field_label'), $stash->get('old_value'), $stash->get('new_value') ]]);
        }
        ;
                    ($_tt_value, $_tt_error) = $_tt_list->get_next();
                }
            };
            $stash->set('loop', $_tt_oldloop);
            die $@ if $@;
            $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
            die $_tt_error if $_tt_error;
        };
        
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
    },
});
