use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'bug/format_comment.txt.tmpl',
        'modtime' => '1390865808',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n";
    $output .=  "\n\n";
    $output .=  "\n\n";
    $output .=  "\n";
#line 22 "template/en/default/bug/format_comment.txt.tmpl"
    $stash->set('comment_body', $stash->get(['comment', 0, 'body', 0]));
    $output .=  "\n";
#line 48 "template/en/default/bug/format_comment.txt.tmpl"
    if ($stash->get(['comment', 0, 'type', 0]) eq '1') {
    $output .=  "\nX";
#line 25 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get('comment_body');
    $output .=  "\n\n*** This ";
#line 27 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " has been marked as a duplicate of ";
#line 27 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " ";
#line 27 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['comment', 0, 'extra_data', 0]);
    $output .=  " ***";
    }
    elsif ($stash->get(['comment', 0, 'type', 0]) eq '2') {
    $output .=  "\n*** ";
#line 29 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bug', 0]);
    $output .=  " ";
#line 29 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['comment', 0, 'extra_data', 0]);
    $output .=  " has been marked as a duplicate of this ";
#line 29 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  ". ***";
    }
    elsif ($stash->get(['comment', 0, 'type', 0]) eq '5') {
    $output .=  "\nCreated attachment ";
#line 31 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['comment', 0, 'extra_data', 0]);
#line 34 "template/en/default/bug/format_comment.txt.tmpl"
    if ($stash->get('is_bugmail')) {
    $output .=  "\n  --> ";
#line 33 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get('urlbase')  . 'attachment.cgi?id='  . $stash->get(['comment', 0, 'extra_data', 0])  . '&action=edit';
    }
    
    $output .=  "\n";
#line 35 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['comment', 0, 'attachment', 0, 'description', 0]);
    $output .=  "\n\n";
#line 37 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['comment', 0, 'body', 0]);
    }
    elsif ($stash->get(['comment', 0, 'type', 0]) eq '6') {
    $output .=  "\nComment on attachment ";
#line 39 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['comment', 0, 'extra_data', 0]);
#line 42 "template/en/default/bug/format_comment.txt.tmpl"
    if ($stash->get('is_bugmail')) {
    $output .=  "\n  --> ";
#line 41 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get('urlbase')  . 'attachment.cgi?id='  . $stash->get(['comment', 0, 'extra_data', 0]);
    }
    
    $output .=  "\n";
#line 43 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['comment', 0, 'attachment', 0, 'description', 0]);
    $output .=  "\n\n";
#line 45 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['comment', 0, 'body', 0]);
    }
    else {
    $output .=  "\nX";
#line 47 "template/en/default/bug/format_comment.txt.tmpl"
    $output .=  $stash->get(['Hook', 0, 'process', [ 'type' ]]);
    }
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
