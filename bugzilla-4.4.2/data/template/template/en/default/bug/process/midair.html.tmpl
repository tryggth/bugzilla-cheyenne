use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'bug/process/midair.html.tmpl',
        'modtime' => '1390865808',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n";
    $output .=  "\n\n";
#line 23 "template/en/default/bug/process/midair.html.tmpl"
    # USE
    $stash->set('Bugzilla',
                $context->plugin('Bugzilla'));
#line 24 "template/en/default/bug/process/midair.html.tmpl"
    $stash->set('cgi', $stash->get(['Bugzilla', 0, 'cgi', 0]));
    $output .=  "\n";
#line 28 "template/en/default/bug/process/midair.html.tmpl"
    if (!($stash->get('header_done'))) {
#line 27 "template/en/default/bug/process/midair.html.tmpl"
    $output .=  $context->process('bug/process/header.html.tmpl');
    }
    
    $output .=  "\n\n<h1>Mid-air collision detected!</h1>\n\n<p>\n  Someone else has made changes to\n  ";
#line 1 "template/en/default/bug/process/midair.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('bug_link', [ $stash->get('bug') ])
                  || $context->throw($context->error);
    
    $output .=  ($stash->get(['terms', 0, 'bug', 0]) . " " . $stash->get(['bug', 0, 'id', 0]));
        
        &$_tt_filter($output);
    };
    
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n  at the same time you were trying to.\n  The changes made were:\n</p>\n\n<p>";
#line 40 "template/en/default/bug/process/midair.html.tmpl"
    $output .=  $context->process('bug/activity/table.html.tmpl', { 'incomplete_data' => 0 });
    $output .=  "\n</p>\n";
#line 50 "template/en/default/bug/process/midair.html.tmpl"
    if ($stash->get(['comments', 0, 'size', 0]) > $stash->get('start_at')) {
    $output .=  "\n<p>\n  Added the comment(s):\n  <blockquote>";
#line 47 "template/en/default/bug/process/midair.html.tmpl"
    $output .=  $context->process('bug/comments.html.tmpl');
    $output .=  "\n  </blockquote>\n</p>";
    }
    
    $output .=  "\n";
#line 59 "template/en/default/bug/process/midair.html.tmpl"
    if ($stash->get(['cgi', 0, 'param', [ 'comment' ]])) {
    $output .=  "\n<p>\n  Your comment was:<br>\n  <blockquote><pre class=\"bz_comment_text\">";
#line 56 "template/en/default/bug/process/midair.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['cgi', 0, 'param', [ 'comment' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n  </pre></blockquote>\n</p>";
    }
    
    $output .=  "\n\n<p>\nYou have the following choices:\n</p>\n\n<ul>\n  <li>\n    <form method=\"post\" action=\"process_bug.cgi\">\n      <input type=\"hidden\" name=\"delta_ts\" \n             value=\"";
#line 69 "template/en/default/bug/process/midair.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'delta_ts', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">";
#line 70 "template/en/default/bug/process/midair.html.tmpl"
    $output .=  $context->process('global/hidden-fields.html.tmpl', { 'exclude' => ('' . "^Bugzilla_login|Bugzilla_password|delta_ts") });
    $output .=  "\n      <input type=\"submit\" id=\"process\" value=\"Submit my changes anyway\">\n        This will cause all of the above changes to be overwritten";
#line 74 "template/en/default/bug/process/midair.html.tmpl"
    if ($stash->get(['comments', 0, 'size', 0]) > $stash->get('start_at')) {
    $output .=  ', except for the added comment(s)';
    }
    
    $output .=  ".\n    </form>\n  </li>";
#line 90 "template/en/default/bug/process/midair.html.tmpl"
    if ($stash->get(['cgi', 0, 'param', [ 'comment' ]])) {
    $output .=  "\n    <li>\n      <form method=\"post\" action=\"process_bug.cgi\">\n        <input type=\"hidden\" name=\"id\" value=\"";
#line 80 "template/en/default/bug/process/midair.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['cgi', 0, 'param', [ 'id' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">\n        <input type=\"hidden\" name=\"delta_ts\" value=\"";
#line 81 "template/en/default/bug/process/midair.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'delta_ts', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">\n        <input type=\"hidden\" name=\"comment\" value=\"";
#line 82 "template/en/default/bug/process/midair.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['cgi', 0, 'param', [ 'comment' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">\n        <input type=\"hidden\" name=\"comment_is_private\"\n               value=\"";
#line 84 "template/en/default/bug/process/midair.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['cgi', 0, 'param', [ 'comment_is_private' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">\n        <input type=\"hidden\" name=\"longdesclength\" value=\"";
#line 85 "template/en/default/bug/process/midair.html.tmpl"
    $output .=  $stash->get(['bug', 0, 'comments', 0, 'size', 0]);
    $output .=  "\">\n        <input type=\"hidden\" name=\"token\" value=\"";
#line 86 "template/en/default/bug/process/midair.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['cgi', 0, 'param', [ 'token' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\">\n        <input type=\"submit\" id=\"process_comment\" value=\"Submit only my new comment\">\n      </form>\n    </li>";
    }
    
    $output .=  "\n  <li>\n    Throw away my changes, and\n    ";
#line 1 "template/en/default/bug/process/midair.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('bug_link', [ $stash->get('bug') ])
                  || $context->throw($context->error);
    
    $output .=  ("revisit " . $stash->get(['terms', 0, 'bug', 0]) . " " . $stash->get(['bug', 0, 'id', 0]));
        
        &$_tt_filter($output);
    };
    
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n  </li>\n</ul>\n";
#line 97 "template/en/default/bug/process/midair.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
