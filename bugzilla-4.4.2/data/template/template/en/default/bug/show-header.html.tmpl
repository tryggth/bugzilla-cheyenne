use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'bug/show-header.html.tmpl',
        'modtime' => '1390865808',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n";
    $output .=  "\n";
#line 16 "template/en/default/bug/show-header.html.tmpl"
    
    # CAPTURE
    $stash->set('filtered_desc', do {
        my $output = '';
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'short_desc', 0]);
        
        &$_tt_filter($output);
    };
    
        $output;
    });
    
#line 17 "template/en/default/bug/show-header.html.tmpl"
    $stash->set('subheader', $stash->get('filtered_desc'));
#line 18 "template/en/default/bug/show-header.html.tmpl"
    
    # CAPTURE
    $stash->set('filtered_timestamp', do {
        my $output = '';
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('time')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'delta_ts', 0]);
        
        &$_tt_filter($output);
    };
    
        $output;
    });
    
#line 1 "template/en/default/bug/show-header.html.tmpl"
    $stash->set('title', ($stash->get(['terms', 0, 'Bug', 0]) . " " . $stash->get(['bug', 0, 'bug_id', 0]) . " &ndash; " . $stash->get('filtered_desc')));
#line 20 "template/en/default/bug/show-header.html.tmpl"
    $stash->set('yui', [ 'autocomplete', 'calendar' ]);
#line 21 "template/en/default/bug/show-header.html.tmpl"
    $stash->set('javascript_urls', [ 'js/util.js', 'js/field.js' ]);
#line 45 "template/en/default/bug/show-header.html.tmpl"
    if ($stash->get(['bug', 0, 'defined', 0])) {
#line 1 "template/en/default/bug/show-header.html.tmpl"
    $stash->set('header', ($stash->get(['terms', 0, 'Bug', 0]) . "&nbsp;" . $stash->get(['bug', 0, 'bug_id', 0])));
#line 1 "template/en/default/bug/show-header.html.tmpl"
    $stash->set('header_addl_info', ("Last modified: " . $stash->get('filtered_timestamp')));
#line 1 "template/en/default/bug/show-header.html.tmpl"
    $stash->set('unfiltered_title', ($stash->get(['terms', 0, 'Bug', 0]) . " " . $stash->get(['bug', 0, 'bug_id', 0]) . " â€“ " . $stash->get(['bug', 0, 'short_desc', 0])));
#line 44 "template/en/default/bug/show-header.html.tmpl"
    
    # CAPTURE
    $stash->set('javascript', do {
        my $output = '';
    $output .=  "\n    if (history && history.replaceState) {\n      if(!document.location.href.match(/show_bug\\.cgi/)) {\n        history.replaceState( null, \n                             \"";
#line 30 "template/en/default/bug/show-header.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('unfiltered_title');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\",  \n                             \"show_bug.cgi?id=";
#line 31 "template/en/default/bug/show-header.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'bug_id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "\" );\n        document.title = \"";
#line 32 "template/en/default/bug/show-header.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('unfiltered_title');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\";\n      }\n      if (document.location.href.match(/show_bug\\.cgi\\?.*list_id=/)) {\n        var href = document.location.href;\n        href = href.replace(/[\\?&]+list_id=(\\d+|cookie)/, '');\n        history.replaceState(null, \"";
#line 37 "template/en/default/bug/show-header.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('unfiltered_title');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\", href);\n      }\n    }\n    YAHOO.util.Event.onDOMReady(function() {\n      initDirtyFieldTracking();\n    });";
#line 43 "template/en/default/bug/show-header.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('javascript');
        
        &$_tt_filter($output);
    };
    
        $output;
    });
    
    }
    
#line 46 "template/en/default/bug/show-header.html.tmpl"
    $stash->set('style_urls', [ 'skins/standard/show_bug.css' ]);
#line 47 "template/en/default/bug/show-header.html.tmpl"
    $stash->set('doc_section', 'bug_page.html');
#line 1 "template/en/default/bug/show-header.html.tmpl"
    $stash->set('bodyclasses', [ 'bz_bug', ("bz_status_" . $stash->get(['bug', 0, 'bug_status', 0])), ("bz_product_" . $stash->get(['bug', 0, 'product', 0])), ("bz_component_" . $stash->get(['bug', 0, 'component', 0])), ("bz_bug_" . $stash->get(['bug', 0, 'bug_id', 0])) ]);
#line 56 "template/en/default/bug/show-header.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['bug', 0, 'groups_in', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'group'} = $_tt_value;
#line 1 "template/en/default/bug/show-header.html.tmpl"
    $output .=  $stash->get(['bodyclasses', 0, 'push', [ ("bz_group_" . $stash->get(['group', 0, 'name', 0])) ]]);;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";
#line 58 "template/en/default/bug/show-header.html.tmpl"
    $output .=  $stash->get(['Hook', 0, 'process', [ 'end' ]]);
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
