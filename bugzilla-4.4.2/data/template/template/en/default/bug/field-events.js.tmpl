use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'bug/field-events.js.tmpl',
        'modtime' => '1390865808',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n";
    $output .=  "\n";
#line 34 "template/en/default/bug/field-events.js.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['field', 0, 'controls_visibility_of', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'controlled_field'} = $_tt_value;
#line 16 "template/en/default/bug/field-events.js.tmpl"
    $stash->set('vis_names', [ ]);
#line 24 "template/en/default/bug/field-events.js.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['controlled_field', 0, 'visibility_values', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'visibility_value'} = $_tt_value;
    $output .=  "\n    ";
#line 19 "template/en/default/bug/field-events.js.tmpl"
    if ($stash->get(['field', 0, 'name', 0]) eq 'product' && $stash->get(['visibility_value', 0, 'id', 0]) ne $stash->get(['product', 0, 'id', 0]) && ! $stash->get(['user', 0, 'can_enter_product', [ $stash->get('visibility_value') ]])) {
    ($_tt_value, $_tt_error) = $_tt_list->get_next();
    next FOR2;
    
    }
    
#line 22 "template/en/default/bug/field-events.js.tmpl"
    if ($stash->get(['field', 0, 'name', 0]) eq 'component' && $stash->get(['visibility_value', 0, 'product_id', 0]) ne $stash->get(['product', 0, 'id', 0])) {
    ($_tt_value, $_tt_error) = $_tt_list->get_next();
    next FOR2;
    
    }
    
#line 23 "template/en/default/bug/field-events.js.tmpl"
    $output .=  $stash->get(['vis_names', 0, 'push', [ $stash->get(['visibility_value', 0, 'name', 0]) ]]);;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";
#line 26 "template/en/default/bug/field-events.js.tmpl"
    if (!($stash->get(['vis_names', 0, 'size', 0]))) {
    ($_tt_value, $_tt_error) = $_tt_list->get_next();
    next FOR1;
    
    }
    
    $output .=  "\n\n  showFieldWhen('";
#line 28 "template/en/default/bug/field-events.js.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['controlled_field', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "',\n                '";
#line 29 "template/en/default/bug/field-events.js.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['field', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "', [";
#line 32 "template/en/default/bug/field-events.js.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('vis_names');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'vis_name'} = $_tt_value;
    $output .=  "'";
#line 31 "template/en/default/bug/field-events.js.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('vis_name');
        
        &$_tt_filter($output);
    };
    
    $output .=  "'";
#line 31 "template/en/default/bug/field-events.js.tmpl"
    if (!($stash->get(['loop', 0, 'last', 0]))) {
    $output .=  ',';
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "]);";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";
#line 36 "template/en/default/bug/field-events.js.tmpl"
    $stash->set('legal_values', [ ]);
#line 41 "template/en/default/bug/field-events.js.tmpl"
    if ($stash->get(['field', 0, 'name', 0]) eq 'component' && $stash->get('product')) {
#line 38 "template/en/default/bug/field-events.js.tmpl"
    $stash->set('legal_values', $stash->get(['product', 0, 'components', 0]));
    }
    else {
#line 40 "template/en/default/bug/field-events.js.tmpl"
    $stash->set('legal_values', $stash->get(['field', 0, 'legal_values', 0]));
    }
    
    $output .=  "\n";
#line 56 "template/en/default/bug/field-events.js.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('legal_values');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'legal_value'} = $_tt_value;
#line 55 "template/en/default/bug/field-events.js.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['legal_value', 0, 'controlled_values', 0, 'keys', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'controlled_field'} = $_tt_value;
#line 45 "template/en/default/bug/field-events.js.tmpl"
    $stash->set('cont_ids', [ ]);
#line 49 "template/en/default/bug/field-events.js.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['legal_value', 0, 'controlled_values', 0, $stash->get('controlled_field'), 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR3:   while (! $_tt_error) {
                $stash->{'val'} = $_tt_value;
#line 47 "template/en/default/bug/field-events.js.tmpl"
    if (! $stash->get(['val', 0, 'is_active', 0])) {
    ($_tt_value, $_tt_error) = $_tt_list->get_next();
    next FOR3;
    
    }
    
#line 48 "template/en/default/bug/field-events.js.tmpl"
    $output .=  $stash->get(['cont_ids', 0, 'push', [ $stash->get(['val', 0, 'id', 0]) ]]);;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 50 "template/en/default/bug/field-events.js.tmpl"
    if (! $stash->get(['cont_ids', 0, 'size', 0])) {
    ($_tt_value, $_tt_error) = $_tt_list->get_next();
    next FOR2;
    
    }
    
    $output .=  "\n    showValueWhen('";
#line 51 "template/en/default/bug/field-events.js.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('controlled_field');
        
        &$_tt_filter($output);
    };
    
    $output .=  "',\n                  [";
#line 52 "template/en/default/bug/field-events.js.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['cont_ids', 0, 'join', [ ',' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "],\n                  '";
#line 53 "template/en/default/bug/field-events.js.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['field', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "',";
#line 54 "template/en/default/bug/field-events.js.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['legal_value', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ");";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
#line 59 "template/en/default/bug/field-events.js.tmpl"
    if ($stash->get(['field', 0, 'name', 0]) eq 'classification') {
    $output .=  "\n  YAHOO.util.Event.on('product', 'change', setClassification);";
    }
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
