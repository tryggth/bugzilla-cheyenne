use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1390865808',
        'name' => 'bug/field-help.none.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n";
    $output .=  "\n";
#line 13 "template/en/default/bug/field-help.none.tmpl"
    if (!($stash->get('in_template_var'))) {
    $context->throw('return', '', \$output);
    }
    
    $output .=  "\n";
#line 1 "template/en/default/bug/field-help.none.tmpl"
    $stash->set(['vars', 0, 'help_html', 0], { 'alias' => ("A short, unique name assigned to " . $stash->get(['terms', 0, 'abug', 0]) . " in order to assist with\n   looking it up and referring to it in other places in " . $stash->get(['terms', 0, 'Bugzilla', 0]) . "."), 'assigned_to' => ("The person in charge of resolving the " . $stash->get(['terms', 0, 'bug', 0]) . "."), 'blocked' => ("This " . $stash->get(['terms', 0, 'bug', 0]) . " must be resolved before the " . $stash->get(['terms', 0, 'bugs', 0]) . " listed in this\n   field can be resolved."), 'bug_file_loc' => ($stash->get(['terms', 0, 'Bugs', 0]) . " can have a URL associated with them - for example, a")  . ' pointer to a web site where the problem is seen.', 'bug_id' => ("The numeric id of " . $stash->get(['terms', 0, 'abug', 0]) . ", unique within this entire installation")  . (" of " . $stash->get(['terms', 0, 'Bugzilla', 0]) . "."), 'bug_severity' => ("How severe the " . $stash->get(['terms', 0, 'bug', 0]) . " is, or whether it's an enhancement."), 'bug_status' => ($stash->get(['terms', 0, 'Abug', 0]) . " may be in any of a number of states."), 'cc' => ("Users who may not have a direct role to play on this " . $stash->get(['terms', 0, 'bug', 0]) . ", but who\n   are interested in its progress."), 'classification' => ($stash->get(['terms', 0, 'Bugs', 0]) . " are categorised into Classifications, Products and")  . ' Components. classifications is the top-level categorisation.', 'component' => 'Components are second-level categories; each belongs to a'  . ' particular Product. Select a Product to narrow down this list.', 'creation_ts' => ("When the " . $stash->get(['terms', 0, 'bug', 0]) . " was filed."), 'deadline' => ("The date that this " . $stash->get(['terms', 0, 'bug', 0]) . " must be resolved by, entered in YYYY-MM-DD\n   format."), 'delta_ts' => ("When this " . $stash->get(['terms', 0, 'bug', 0]) . " was last updated."), 'dependson' => ("The " . $stash->get(['terms', 0, 'bugs', 0]) . " listed here must be resolved before this " . $stash->get(['terms', 0, 'bug', 0]) . "\n   can be resolved."), 'estimated_time' => ("The amount of time that has been estimated it will take to resolve\n   this " . $stash->get(['terms', 0, 'bug', 0]) . "."), 'importance' => ("The importance of " . $stash->get(['terms', 0, 'abug', 0]) . " is described as the combination of\n   its " . $stash->get(['vars', 0, 'field_descs', 0, 'priority', 0]) . " and " . $stash->get(['vars', 0, 'field_descs', 0, 'bug_severity', 0]) . "."), 'keywords' => ("You can add keywords from a defined list to " . $stash->get(['terms', 0, 'bugs', 0]) . ", in order")  . ' to easily identify and group them.', 'longdesc' => ($stash->get(['terms', 0, 'Bugs', 0]) . " have comments added to them by " . $stash->get(['terms', 0, 'Bugzilla', 0]) . " users.")  . ' You can search for some text in those comments.', 'op_sys' => ("The operating system the " . $stash->get(['terms', 0, 'bug', 0]) . " was observed on."), 'percentage_complete' => ("How close to 100% done this " . $stash->get(['terms', 0, 'bug', 0]) . " is, by comparing its\n   " . $stash->get(['vars', 0, 'field_descs', 0, 'work_time', 0]) . " to its " . $stash->get(['vars', 0, 'field_descs', 0, 'estimated_time', 0]) . "."), 'priority' => ("Engineers prioritize their " . $stash->get(['terms', 0, 'bugs', 0]) . " using this field."), 'product' => ($stash->get(['terms', 0, 'Bugs', 0]) . " are categorised into Products and Components."), 'qa_contact' => ("The person responsible for confirming this " . $stash->get(['terms', 0, 'bug', 0]) . " if it is")  . (" unconfirmed, and for verifying the fix once the " . $stash->get(['terms', 0, 'bug', 0]))  . ' has been resolved.', 'remaining_time' => ("The number of hours of work left on this " . $stash->get(['terms', 0, 'bug', 0]) . ", calculated by\n   subtracting the " . $stash->get(['vars', 0, 'field_descs', 0, 'work_time', 0]) . " from the \n   " . $stash->get(['vars', 0, 'field_descs', 0, 'estimated_time', 0]) . "."), 'rep_platform' => ("The hardware platform the " . $stash->get(['terms', 0, 'bug', 0]) . " was observed on."), 'reporter' => ("The person who filed this " . $stash->get(['terms', 0, 'bug', 0]) . "."), 'resolution' => ("If " . $stash->get(['terms', 0, 'abug', 0]) . " is in a resolved state, then one of these reasons")  . ' will be given for its resolution.', 'see_also' => ("This allows you to refer to " . $stash->get(['terms', 0, 'bugs', 0]) . " in other installations.\n   You can enter a URL to " . $stash->get(['terms', 0, 'abug', 0]) . " in the 'Add " . $stash->get(['terms', 0, 'Bug', 0]) . " URLs'\n   field to note that that " . $stash->get(['terms', 0, 'bug', 0]) . " is related to this one. You can\n   enter multiple URLs at once by separating them with a comma.\n\n   <p>You should normally use this field to refer to " . $stash->get(['terms', 0, 'bugs', 0]) . " in\n     <em>other</em> installations. For " . $stash->get(['terms', 0, 'bugs', 0]) . " in this\n     installation, it is better to use the " . $stash->get(['vars', 0, 'field_descs', 0, 'dependson', 0]) . " and \n     " . $stash->get(['vars', 0, 'field_descs', 0, 'blocked', 0]) . " fields.</p>"), 'short_desc' => ("The " . $stash->get(['terms', 0, 'bug', 0]) . " summary is a short sentence which succinctly")  . (" describes what the " . $stash->get(['terms', 0, 'bug', 0]) . " is about."), 'status_whiteboard' => ("Each " . $stash->get(['terms', 0, 'bug', 0]) . " has a free-form single line text entry box for")  . ' adding tags and status information.', 'tag' => ("Unlike " . $stash->get(['vars', 0, 'field_descs', 0, 'keywords', 0]) . " which are global and visible by\n   all users, " . $stash->get(['vars', 0, 'field_descs', 0, 'tag', 0]) . " are personal and can only be\n   viewed and edited by their author.\n   Editing them won't send any notification to other users. Use them\n   to tag and keep track of " . $stash->get(['terms', 0, 'bugs', 0]) . "."), 'target_milestone' => ("The " . $stash->get(['vars', 0, 'field_descs', 0, 'target_milestone', 0]) . " field is used to define when the")  . (" engineer the " . $stash->get(['terms', 0, 'bug', 0]) . " is assigned to expects to fix it."), 'version' => 'The version field defines the version of the software the'  . (" " . $stash->get(['terms', 0, 'bug', 0]) . " was found in."), 'votes' => ("Some " . $stash->get(['terms', 0, 'bugs', 0]) . " can be voted for, and you can limit your search to")  . (" " . $stash->get(['terms', 0, 'bugs', 0]) . " with more than a certain number of votes."), 'work_time' => ("The total amount of time spent on this " . $stash->get(['terms', 0, 'bug', 0]) . " so far."), 'chfield' => 'You can search for specific types of change - this field defines'  . ' which field you are interested in changes for.', 'chfieldfrom' => 'Specify the start and end dates either in YYYY-MM-DD format
       optionally followed by HH:mm, in 24 hour clock), or in relative
       dates such as 1h, 2d, 3w, 4m, 5y, which respectively mean one hour,
       two days, three weeks, four months, or five years ago. 0d is last
       midnight, and 0h, 0w, 0m, 0y is the beginning of this hour, week,
       month, or year.', 'chfieldvalue' => 'The value the field defined above changed to during that time.', 'content' => ("This is a field available in searches that does a Google-like\n   'full-text' search on the " . $stash->get(['vars', 0, 'field_descs', 0, 'short_desc', 0]) . " and\n   " . $stash->get(['vars', 0, 'field_descs', 0, 'longdesc', 0]) . " fields."), 'email1' => ("Every " . $stash->get(['terms', 0, 'bug', 0]) . " has people associated with it in different")  . ' roles. Here, you can search on what people are in what role.'  });
    $output .=  "\n";
#line 198 "template/en/default/bug/field-help.none.tmpl"
    $stash->set(['vars', 0, 'help_html', 0, 'email2', 0], $stash->get(['vars', 0, 'help_html', 0, 'email1', 0]));
#line 199 "template/en/default/bug/field-help.none.tmpl"
    $stash->set(['vars', 0, 'help_html', 0, 'chfieldto', 0], $stash->get(['vars', 0, 'help_html', 0, 'chfieldfrom', 0]));
#line 200 "template/en/default/bug/field-help.none.tmpl"
    $stash->set(['vars', 0, 'help_html', 0, 'deadlinefrom', 0], $stash->get(['vars', 0, 'help_html', 0, 'deadline', 0]));
#line 201 "template/en/default/bug/field-help.none.tmpl"
    $stash->set(['vars', 0, 'help_html', 0, 'deadlineto', 0], $stash->get(['vars', 0, 'help_html', 0, 'deadline', 0]));
    $output .=  "\n";
#line 207 "template/en/default/bug/field-help.none.tmpl"
    
    # CAPTURE
    $stash->set('help_all_note', do {
        my $output = '';
    $output .=  "\n  <strong>Note:</strong> When searching, selecting the option \"All\"\n  only finds ";
#line 205 "template/en/default/bug/field-help.none.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " whose value for this field is literally\n  the word \"All\".";
        $output;
    });
    
#line 210 "template/en/default/bug/field-help.none.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = [ 'op_sys', 'rep_platform' ];
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'all_field'} = $_tt_value;
#line 209 "template/en/default/bug/field-help.none.tmpl"
    $stash->set(['vars', 0, 'help_html', 0, $stash->get('all_field'), 0], $stash->get(['vars', 0, 'help_html', 0, $stash->get('all_field'), 0])  . ' '  . $stash->get('help_all_note'));;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";
#line 215 "template/en/default/bug/field-help.none.tmpl"
    if ($stash->get(['Param', [ 'useclassification' ]])) {
#line 213 "template/en/default/bug/field-help.none.tmpl"
    $stash->set(['vars', 0, 'help_html', 0, 'product', 0], $stash->get(['vars', 0, 'help_html', 0, 'product', 0])  . ' Select a Classification to narrow down this list.');
    }
    
    $output .=  "\n";
#line 241 "template/en/default/bug/field-help.none.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['bug_fields', 0, 'keys', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'help_field'} = $_tt_value;
    $output .=  "\n\n  ";
#line 232 "template/en/default/bug/field-help.none.tmpl"
    if (! $stash->get(['vars', 0, 'help_html', 0, $stash->get('help_field'), 0, 'defined', 0])) {
#line 231 "template/en/default/bug/field-help.none.tmpl"
    if ($stash->get(['bug_fields', 0, $stash->get('help_field'), 0, 'long_desc', 0])) {
#line 222 "template/en/default/bug/field-help.none.tmpl"
    $stash->set(['vars', 0, 'help_html', 0, $stash->get('help_field'), 0], $stash->get(['bug_fields', 0, $stash->get('help_field'), 0, 'long_desc', 0]));
    }
    else {
#line 224 "template/en/default/bug/field-help.none.tmpl"
    $stash->set('field_type', $stash->get(['bug_fields', 0, $stash->get('help_field'), 0, 'type', 0]));
#line 227 "template/en/default/bug/field-help.none.tmpl"
    
    # CAPTURE
    $stash->set('field_type_desc', do {
        my $output = '';
#line 226 "template/en/default/bug/field-help.none.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['field_types', 0, $stash->get('field_type'), 0]);
        
        &$_tt_filter($output);
    };
    
        $output;
    });
    
#line 1 "template/en/default/bug/field-help.none.tmpl"
    $stash->set(['vars', 0, 'help_html', 0, $stash->get('help_field'), 0], ("A custom " . $stash->get('field_type_desc') . " field in this installation")  . (" of " . $stash->get(['terms', 0, 'Bugzilla', 0]) . "."));
    }
    
    }
    
    $output .=  "\n\n  ";
#line 238 "template/en/default/bug/field-help.none.tmpl"
    
    # CAPTURE
    $stash->set('type_desc', do {
        my $output = '';
    $output .=  "\n    The type of ";
#line 236 "template/en/default/bug/field-help.none.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['vars', 0, 'field_descs', 0, $stash->get('help_field'), 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " search you \n    would like.";
        $output;
    });
    
#line 239 "template/en/default/bug/field-help.none.tmpl"
    $stash->set('type_name', $stash->get('help_field')  . '_type');
#line 240 "template/en/default/bug/field-help.none.tmpl"
    $stash->set(['vars', 0, 'help_html', 0, $stash->get('type_name'), 0], $stash->get('type_desc'));;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";
#line 243 "template/en/default/bug/field-help.none.tmpl"
    $output .=  $stash->get(['Hook', 0, 'process', [ 'end' ]]);
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
