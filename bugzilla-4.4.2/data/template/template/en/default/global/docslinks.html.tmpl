use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'global/docslinks.html.tmpl',
        'modtime' => '1390865808',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n";
    $output .=  "\n";
#line 36 "template/en/default/global/docslinks.html.tmpl"
    if ($stash->get(['Param', [ 'docs_urlbase' ]]) && $stash->get(['docslinks', 0, 'keys', 0, 'size', 0]) || ($stash->get(['admindocslinks', 0, 'keys', 0, 'size', 0]) && $stash->get(['user', 0, 'in_group', [ 'admin' ]]))) {
    $output .=  "\n  <div id=\"docslinks\">\n    <h2>Related documentation</h2>\n    <ul>";
#line 32 "template/en/default/global/docslinks.html.tmpl"
    if ($stash->get(['user', 0, 'in_group', [ 'admin' ]])) {
#line 31 "template/en/default/global/docslinks.html.tmpl"
    $output .=  $context->process('docslinkslist', { 'docstype' => $stash->get('admindocslinks') });
    }
    
#line 33 "template/en/default/global/docslinks.html.tmpl"
    $output .=  $context->process('docslinkslist', { 'docstype' => $stash->get('docslinks') });
    $output .=  "\n    </ul>\n  </div>";
    }
    
    $output .=  "\n";
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'docslinkslist' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
#line 44 "template/en/default/global/docslinks.html.tmpl"
        
        # FOREACH 
        do {
            my ($_tt_value, $_tt_error, $_tt_oldloop);
            my $_tt_list = $stash->get(['docstype', 0, 'keys', 0]);
            
            unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
                $_tt_list = Template::Config->iterator($_tt_list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($_tt_value, $_tt_error) = $_tt_list->get_first();
            eval { $_tt_oldloop = $stash->get('loop') };
            $stash->set('loop', $_tt_list);
            eval {
        FOR1:   while (! $_tt_error) {
                    $stash->{'docslink'} = $_tt_value;
        $output .=  "\n    <li>\n      <a href=\"";
#line 41 "template/en/default/global/docslinks.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get('docs_urlbase');
            
            &$_tt_filter($output);
        };
        
#line 42 "template/en/default/global/docslinks.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('none')
                      || $context->throw($context->error);
        
        $output .=  $stash->get('docslink');
            
            &$_tt_filter($output);
        };
        
        $output .=  "\">";
#line 42 "template/en/default/global/docslinks.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['docstype', 0, $stash->get('docslink'), 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "</a>\n    </li>";;
                    ($_tt_value, $_tt_error) = $_tt_list->get_next();
                }
            };
            $stash->set('loop', $_tt_oldloop);
            die $@ if $@;
            $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
            die $_tt_error if $_tt_error;
        };
        
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
    },
});
