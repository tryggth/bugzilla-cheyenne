use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1390865808',
        'name' => 'list/list.csv.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n";
#line 9 "template/en/default/list/list.csv.tmpl"
    $stash->set('colsepchar', $stash->get(['user', 0, 'settings', 0, 'csv_colsepchar', 0, 'value', 0]));
    $output .=  "\n";
#line 21 "template/en/default/list/list.csv.tmpl"
    if ($stash->get('human')) {
#line 12 "template/en/default/list/list.csv.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['field_descs', 0, 'bug_id', 0]);
        
        &$_tt_filter($output);
    };
    
#line 15 "template/en/default/list/list.csv.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('displaycolumns');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'column'} = $_tt_value;
#line 14 "template/en/default/list/list.csv.tmpl"
    $output .=  $stash->get('colsepchar');
#line 14 "template/en/default/list/list.csv.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['field_descs', 0, $stash->get('column'), 0]);
        
        &$_tt_filter($output);
    };
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    }
    else {
    $output .=  "\n  bug_id";
#line 20 "template/en/default/list/list.csv.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('displaycolumns');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'column'} = $_tt_value;
#line 19 "template/en/default/list/list.csv.tmpl"
    $output .=  $stash->get('colsepchar');
#line 19 "template/en/default/list/list.csv.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('column');
        
        &$_tt_filter($output);
    };
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    }
    
    $output .=  "\n";
#line 38 "template/en/default/list/list.csv.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('bugs');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'bug'} = $_tt_value;
#line 24 "template/en/default/list/list.csv.tmpl"
    $output .=  $stash->get(['bug', 0, 'bug_id', 0]);
#line 36 "template/en/default/list/list.csv.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get('displaycolumns');
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'column'} = $_tt_value;
#line 26 "template/en/default/list/list.csv.tmpl"
    $output .=  $stash->get('colsepchar');
#line 34 "template/en/default/list/list.csv.tmpl"
    if ($stash->get('column') eq 'opendate' || $stash->get('column') eq 'changeddate') {
#line 28 "template/en/default/list/list.csv.tmpl"
    $stash->set('rawcolumn', $stash->get(['column', 0, 'replace', [ 'date', 'time' ]]));
#line 29 "template/en/default/list/list.csv.tmpl"
    
    # CAPTURE
    $stash->set(['bug', 0, $stash->get('column'), 0], do {
        my $output = '';
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('time', [ '%Y-%m-%d %H:%M:%S' ])
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, $stash->get('rawcolumn'), 0]);
        
        &$_tt_filter($output);
    };
    
        $output;
    });
    
    }
    elsif ($stash->get('column') eq 'bug_status') {
#line 31 "template/en/default/list/list.csv.tmpl"
    $stash->set(['bug', 0, $stash->get('column'), 0], $stash->get(['display_value', [ 'bug_status', $stash->get(['bug', 0, $stash->get('column'), 0]) ]]));
    }
    elsif ($stash->get('column') eq 'resolution') {
#line 33 "template/en/default/list/list.csv.tmpl"
    $stash->set(['bug', 0, $stash->get('column'), 0], $stash->get(['display_value', [ 'resolution', $stash->get(['bug', 0, $stash->get('column'), 0]) ]]));
    }
    
#line 35 "template/en/default/list/list.csv.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('csv')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, $stash->get('column'), 0]);
        
        &$_tt_filter($output);
    };
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
