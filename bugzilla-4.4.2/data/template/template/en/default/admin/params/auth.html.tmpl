use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1390865808',
        'name' => 'admin/params/auth.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
#line 9 "template/en/default/admin/params/auth.html.tmpl"
    $stash->set('title', 'User Authentication');
    $stash->set('desc', 'Set up your authentication policies');
    $output .=  "\n";
#line 1 "template/en/default/admin/params/auth.html.tmpl"
    $stash->set('param_descs', { 'auth_env_id' => 'Environment variable used by external authentication system '  . 'to store a unique identifier for each user. Leave it blank '  . 'if there isn\'t one or if this method of authentication '  . 'is not being used.', 'auth_env_email' => 'Environment variable used by external authentication system '  . 'to store each user\'s email address. This is a required '  . 'field for environmental authentication. Leave it blank '  . 'if you are not going to use this feature.', 'auth_env_realname' => 'Environment variable used by external authentication system '  . 'to store the user\'s real name. Leave it blank if there '  . 'isn\'t one or if this method of authentication is not being '  . 'used.', 'user_info_class' => 'Mechanism(s) to be used for gathering a user\'s login information.
                          More than one may be selected. If the first one returns nothing,
                          the second is tried, and so on.<br>
                          The types are:
                          <dl>
                            <dt>CGI</dt>
                            <dd>
                              Asks for username and password via CGI form interface.
                            </dd>
                            <dt>Env</dt>
                            <dd>
                              Info for a pre-authenticated user is passed in system
                              environment variables.
                            </dd>
                          </dl>', 'user_verify_class' => ("Mechanism(s) to be used for verifying (authenticating) information\n                        gathered by user_info_class.\n                        More than one may be selected. If the first one cannot find the\n                        user, the second is tried, and so on.<br>\n                        The types are:\n                        <dl>\n                          <dt>DB</dt>\n                          <dd>\n                            " . $stash->get(['terms', 0, 'Bugzilla', 0]) . "'s built-in authentication. This is the most common\n                            choice.\n                          </dd>\n                          <dt>RADIUS</dt>\n                          <dd>\n                            RADIUS authentication using a RADIUS server.\n                            Please see the " . $stash->get(['terms', 0, 'Bugzilla', 0]) . " documentation for\n                            more information.\n                            Using this method requires\n                            <a href=\"?section=radius\">additional\n                            parameters</a> to be set.\n                          </dd>\n                          <dt>LDAP</dt>\n                          <dd>\n                            LDAP authentication using an LDAP server.\n                            Please see the " . $stash->get(['terms', 0, 'Bugzilla', 0]) . " documentation\n                            for more information. Using this method requires\n                            <a href=\"?section=ldap\">additional\n                            parameters</a> to be set.\n                          </dd>\n                        </dl>"), 'rememberlogin' => ("Controls management of session cookies\n                    <ul>\n                      <li>\n                        on - Session cookies never expire (the user has to login only\n                        once per browser).\n                      </li>\n                      <li>\n                        off - Session cookies last until the users session ends (the user\n                        will have to login in each new browser session).\n                      </li>\n                      <li>\n                        defaulton/defaultoff - Default behavior as described\n                        above, but user can choose whether " . $stash->get(['terms', 0, 'Bugzilla', 0]) . " will remember his\n                        login or not.\n                      </li>\n                    </ul>"), 'requirelogin' => 'If this option is set, all access to the system beyond the '  . 'front page will require a login. No anonymous users will '  . 'be permitted.', 'emailregexp' => 'This defines the regular expression to use for legal email addresses. '  . 'The default tries to match fully qualified email addresses. '  . 'Use <tt>.*</tt> to accept any email address following the '  . '<a href=\'http://tools.ietf.org/html/rfc2822#section-3.4.1\'>RFC 2822</a> '  . ("specification. Another popular value to put here is <tt>^[^\@]+" . "</tt>, ")  . 'which means \'local usernames, no @ allowed.\'', 'emailregexpdesc' => 'This describes in English words what kinds of legal addresses '  . 'are allowed by the <tt>emailregexp</tt> param.', 'emailsuffix' => 'This is a string to append to any email addresses when actually '  . 'sending mail to that address. It is useful if you have changed '  . 'the <tt>emailregexp</tt> param to only allow local usernames, '  . 'but you want the mail to be delivered to username@my.local.hostname.', 'createemailregexp' => 'This defines the (case-insensitive) regexp to use for email addresses that are '  . 'permitted to self-register using a \'New Account\' feature. The '  . 'default (.*) permits any account matching the emailregexp '  . 'to be created. If this parameter is left blank, no users '  . 'will be permitted to create their own accounts and all accounts '  . 'will have to be created by an administrator.', 'password_complexity' => 'Set the complexity required for passwords. In all cases must the passwords '  . ("be at least " . '6' . " characters long.")  . '<ul><li>no_constraints - No complexity required.</li>'  . '<li>mixed_letters - Passwords must contain at least one UPPER and one lower '  . 'case letter.</li>'  . '<li>letters_numbers - Passwords must contain at least one UPPER and one '  . 'lower case letter and a number.</li>'  . '<li>letters_numbers_specialchars - Passwords must contain at least one '  . 'letter, a number and a special character.</li></ul>'  });
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
