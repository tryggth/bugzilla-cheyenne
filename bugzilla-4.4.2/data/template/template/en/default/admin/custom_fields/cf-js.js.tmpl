use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.25
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'name' => 'admin/custom_fields/cf-js.js.tmpl',
        'modtime' => '1390865808',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n// Disable a checkbox based on the state of another one.\nfunction toggleCheckbox(this_checkbox, other_checkbox_id) {\n    var other_checkbox = document.getElementById(other_checkbox_id);\n    other_checkbox.disabled = !this_checkbox.checked;\n}\n\nvar select_values = new Array();";
#line 16 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    # USE
    $stash->set('Bugzilla',
                $context->plugin('Bugzilla'));
#line 31 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['Bugzilla', 0, 'fields', [ { 'is_select' => 1  } ]]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'sel_field'} = $_tt_value;
    $output .=  "\n  select_values[";
#line 18 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['sel_field', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "] = [";
#line 29 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['sel_field', 0, 'legal_values', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR2:   while (! $_tt_error) {
                $stash->{'legal_value'} = $_tt_value;
    $output .=  "\n    ";
#line 27 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    if ($stash->get(['sel_field', 0, 'name', 0]) eq 'component') {
#line 23 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    $stash->set('value_name', $stash->get(['display_value', [ 'product', $stash->get(['legal_value', 0, 'product', 0, 'name', 0]) ]])  . ': '  . $stash->get(['display_value', [ $stash->get(['sel_field', 0, 'name', 0]), $stash->get(['legal_value', 0, 'name', 0]) ]]));
    }
    else {
#line 26 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    $stash->set('value_name', $stash->get(['display_value', [ $stash->get(['sel_field', 0, 'name', 0]), $stash->get(['legal_value', 0, 'name', 0]) ]]));
    }
    
    $output .=  "\n    [";
#line 28 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['legal_value', 0, 'id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ", '";
#line 28 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('js')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('value_name');
        
        &$_tt_filter($output);
    };
    
    $output .=  "']";
#line 28 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    if (!($stash->get(['loop', 0, 'last', 0]))) {
    $output .=  ',';
    }
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n  ];";;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n\nfunction onChangeType(type_field) {\n    var value_field = document.getElementById('value_field_id');\n    if (type_field.value == ";
#line 35 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    $output .=  '2';
    $output .=  "\n        || type_field.value == ";
#line 36 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    $output .=  '3';
    $output .=  ")\n    {\n        value_field.disabled = false;\n    }\n    else {\n        value_field.disabled = true;\n    }\n\n   var reverse_desc = document.getElementById('reverse_desc');\n   if (type_field.value == ";
#line 45 "template/en/default/admin/custom_fields/cf-js.js.tmpl"
    $output .=  '6';
    $output .=  ")\n   {\n       reverse_desc.disabled = false;\n   }\n   else {\n       reverse_desc.disabled = true;\n       reverse_desc.value = '';\n   }\n}\n\nfunction onChangeVisibilityField() {\n    var vis_field = document.getElementById('visibility_field_id');\n    var vis_value = document.getElementById('visibility_values');\n\n    if (vis_field.value) {\n        var values = select_values[vis_field.value];\n        bz_populateSelectFromArray(vis_value, values);\n    }\n    else {\n        bz_clearOptions(vis_value);\n    }\n}\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
